// <auto-generated />
using System;
using MatchApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MatchDbContext))]
    partial class MatchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Model.MatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwayTeam");

                    b.Property<string>("EventID");

                    b.Property<DateTime>("FinishTime");

                    b.Property<string>("HomeTeam");

                    b.Property<string>("Sport");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("Data.Model.MatchTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentMinutes");

                    b.Property<int>("EventFk");

                    b.Property<string>("EventID");

                    b.Property<bool>("IsPause");

                    b.Property<string>("Score");

                    b.HasKey("Id");

                    b.HasIndex("EventFk");

                    b.ToTable("MatchTimes");
                });

            modelBuilder.Entity("Data.Model.Stakes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchTimeFk");

                    b.Property<string>("StakeId");

                    b.Property<string>("StakeKey")
                        .HasMaxLength(2);

                    b.Property<double>("StakeValue");

                    b.Property<double>("StakeValueChanged");

                    b.HasKey("Id");

                    b.HasIndex("MatchTimeFk");

                    b.ToTable("Stakes");
                });

            modelBuilder.Entity("Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MatchApp.Data.Model.PickedMatches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwayTeam");

                    b.Property<string>("EventID");

                    b.Property<string>("HomeTeam");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("Score");

                    b.Property<double>("SelectedStakeValueOne");

                    b.Property<double>("SelectedStakeValueTwo");

                    b.Property<double>("SelectedStakeValueX");

                    b.Property<string>("Sport");

                    b.Property<double>("StakeValueOne");

                    b.Property<double>("StakeValueTwo");

                    b.Property<double>("StakeValueX");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("PickedMatches");
                });

            modelBuilder.Entity("Data.Model.MatchTime", b =>
                {
                    b.HasOne("Data.Model.MatchEvent", "MatchEvent")
                        .WithMany("MatchTimeList")
                        .HasForeignKey("EventFk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Model.Stakes", b =>
                {
                    b.HasOne("Data.Model.MatchTime", "MatchTime")
                        .WithMany("StakesList")
                        .HasForeignKey("MatchTimeFk")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
